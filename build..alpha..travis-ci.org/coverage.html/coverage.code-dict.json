{"/home/travis/build/npmtest/node-npmtest-bashful/test.js":"/* istanbul instrument in package npmtest_bashful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bashful/lib.npmtest_bashful.js":"/* istanbul instrument in package npmtest_bashful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bashful = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bashful = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bashful/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bashful && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bashful */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bashful\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bashful.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bashful.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bashful.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bashful.__dirname + '/lib.npmtest_bashful.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/index.js":"var through = require('through');\nvar resumer = require('resumer');\nvar duplexer = require('duplexer');\nvar shellQuote = require('shell-quote');\nvar decodePrompt = require('decode-prompt');\nvar path = require('path');\n\nvar EventEmitter = require('events').EventEmitter;\nvar inherits = require('inherits');\nvar nextTick = require('./lib/next_tick.js');\n\nvar stringify = JSON.stringify\n\nmodule.exports = Bash;\ninherits(Bash, EventEmitter);\n\nfunction Bash (opts) {\n    if (!(this instanceof Bash)) return new Bash(opts);\n    if (!opts) opts = {};\n    this.env = opts.env || {};\n    if (this.env.PS1 === undefined) {\n        this.env.PS1 = opts.isTTY === false\n            ? '\\\\w \\\\$ '\n            : '\\\\w \\\\$ '\n        ;\n    }\n    if (!this.env.PWD) this.env.PWD = '/';\n    this.custom = opts.custom || [];\n    \n    this._reader = opts.read || function () {};\n    this._writer = opts.write || function () {};\n    this._spawner = opts.spawn || function () {};\n    this._exists = opts.exists || function (file, cb) { cb(false) };\n    this._globber = opts.glob || function (p, cb) { cb(p) };\n    \n    this._cursorX = 0;\n    this.history = [];\n    this.historyIndex = 0;\n    this._historyLast = null;\n    this.jobs = {};\n}\n\nBash.prototype._read = function (rfile) {\n    var file = path.resolve(this.env.PWD, rfile);\n    this.emit('read', file);\n    if (this._reader) return this._reader(file);\n};\n\nBash.prototype._write = function (rfile) {\n    var file = path.resolve(this.env.PWD, rfile);\n    this.emit('write', file);\n    if (this._writer) return this._writer(file);\n};\n\nBash.prototype._spawn = function (cmd, args, opts) {\n    this.emit('spawn', cmd, args, opts);\n    if (this._spawner) return this._spawner(cmd, args, opts);\n};\n\nBash.prototype.getPrompt = function () {\n    return decodePrompt(this.env.PS1, {\n        env: this.env\n    });\n};\n\nBash.prototype.createStream = function () {\n    var self = this;\n    \n    var line = '';\n    var mode = null;\n    \n    var input = through(function write (buf) {\n        if (typeof buf !== 'string') buf = buf.toString('utf8');\n        if (self.current) self.current.write(buf);\n        \n        for (var i = 0; i < buf.length; i++) {\n            var c = buf.charCodeAt(i);\n            if (self.current) {}\n            else if (mode === 'escape' && c === 0x5b) {\n                mode = '[';\n                continue;\n            }\n            else if (mode === 'escape' && c === 0x4f) {\n                mode = 'O';\n                continue;\n            }\n            else if (mode === '[' && c >= 65 && c <= 68) {\n                var dir = {\n                    A: 'up', B: 'down', C: 'right', D: 'left'\n                }[String.fromCharCode(c)];\n                \n                if (dir === 'left' && self._cursorX) {\n                    self._cursorX --;\n                    output.queue('\\x1b\\x5bD');\n                }\n                else if (dir === 'right' && self._cursorX < line.length) {\n                    self._cursorX ++;\n                    output.queue('\\x1b\\x5bC');\n                }\n                else if (dir === 'up') {\n                    if (self._cursorX !== line.length) {\n                        output.queue(\n                            '\\x1b[' + (line.length - self._cursorX) + 'C'\n                        );\n                        self._cursorX = line.length;\n                    }\n                    else if (self.historyIndex > 0) {\n                        if (self.historyIndex === self.history.length\n                        && self._historyLast === null) {\n                            self._historyLast = line;\n                        }\n                        line = self.history[-- self.historyIndex];\n                        if (self._cursorX) {\n                            output.queue(\n                                '\\x1b[' + self._cursorX + 'D\\x1b[K'\n                                + line\n                            );\n                        }\n                        else output.queue(line);\n                        self._cursorX = line.length;\n                    }\n                }\n                else if (dir === 'down'\n                && self.historyIndex <= self.history.length - 1) {\n                    if (self.historyIndex === self.history.length - 1) {\n                        line = self._historyLast || '';\n                        self.historyIndex ++;\n                    }\n                    else line = self.history[++ self.historyIndex];\n                    if (self._cursorX) {\n                        output.queue(\n                            '\\x1b[' + self._cursorX + 'D\\x1b[K'\n                            + line\n                        );\n                    }\n                    else output.queue(line)\n                    \n                    self._cursorX = line.length;\n                }\n                \n                mode = null;\n                continue;\n            }\n            else if (mode === '[' && (c >= 48 && c <= 57)) {\n                mode = '[' + buf.charAt(i);\n                continue;\n            }\n            else if (/^\\[\\d/.test(mode) && c === 0x7e) {\n                if (mode === '[3') { // delete\n                    var before = line.slice(0, self._cursorX);\n                    var after = line.slice(self._cursorX + 1);\n                    line = before + after;\n                    output.queue(\n                        '\\x1b[K' + after + '\\x1b[' + after.length + 'D'\n                    );\n                }\n                // todo: pgup, pgdown, insert\n                mode = null;\n                continue;\n            }\n            else if (mode === 'O') {\n                var ch = buf.charAt(i);\n                if (ch === 'F') { // end\n                    output.queue('\\x1b[' + (line.length - self._cursorX) + 'C');\n                    self._cursorX = line.length;\n                }\n                else if (ch === 'H') { // home\n                    output.queue('\\x1b[' + self._cursorX + 'D');\n                    self._cursorX = 0;\n                }\n                mode = null;\n                continue;\n            }\n            else if (mode) {\n                mode = null;\n                continue;\n            }\n            \n            if (c === 3) {\n                if (self.current) {\n                    line = '';\n                    self.current.emit('SIGINT');\n                    output.queue('^C');\n                }\n                else {\n                    line = '';\n                    self._cursorX = 0;\n                    self.historyIndex = self.history.length;\n                    self._historyLast = null;\n                    output.queue('\\n');\n                    output.queue(self.getPrompt());\n                }\n                return write(buf.slice(i + 1));\n            }\n            else if (c === 4) {\n                if (self.current) self.current.end();\n                else this.queue(null);\n                self._cursorX = 0;\n                return write(buf.slice(i + 1));\n            }\n            else if (c === 8 || c === 0x7f) {\n                if (self._cursorX) {\n                    self._cursorX --;\n                    var before = line.slice(0, self._cursorX)\n                    var after = line.slice(self._cursorX + 1)\n                    line = before + after;\n                    \n                    if (after.length) {\n                        output.queue(\n                            '\\010\\x1b[K' + after\n                            + '\\x1b[' + after.length + 'D'\n                        );\n                    }\n                    else output.queue('\\010 \\010');\n                }\n                return write(buf.slice(i + 1));\n            }\n            else if (c === 10 || c === 13) {\n                input.queue(line);\n                if (line.length) {\n                    self.history.push(line);\n                    self.historyIndex = self.history.length;\n                    self._historyLast = null;\n                }\n                self._cursorX = 0;\n                line = '';\n                return write(buf.slice(i + 1));\n            }\n            else if (c === 0x1b) {\n                mode = 'escape';\n            }\n            else {\n                var before = line.slice(0, self._cursorX);\n                var after = line.slice(self._cursorX);\n                var middle = String.fromCharCode(c);\n                \n                if (!/\\s/.test(middle) && c < 26) {\n                    output.queue('^' + String.fromCharCode(64 + c));\n                }\n                line = before + middle + after;\n                \n                if (after.length && middle === ' ') {\n                    output.queue(\n                        '\\x1b[K' + after\n                        + '\\x1b[' + (after.length + 1) + 'D '\n                    );\n                }\n                else if (after.length) {\n                    output.queue(\n                        '\\x1b[K' + after\n                        + '\\x1b[' + after.length + 'D'\n                    );\n                }\n                self._cursorX ++;\n            }\n        }\n    }, inputEnd);\n    \n    function inputEnd () {\n        if (line.length) this.queue(line);\n        var jobs = Object.keys(self.jobs);\n        var pending = jobs.length;\n        if (pending > 0) {\n            jobs.forEach(function (index) {\n                var j = self.jobs[index];\n                j.on('data', function (buf) {\n                    //output.queue(buf);\n                });\n                j.on('end', function () {\n                    if (--pending === 0) input.queue(null);\n                });\n            });\n        }\n        else input.queue(null);\n    }\n    \n    var closed = false;\n    \n    var output = resumer();\n    self.on('bgdata', function (buf) {\n        output.queue(buf);\n    });\n    output.queue(self.getPrompt());\n    \n    self.current = null;\n    self.once('exit', end);\n    \n    var queue = [];\n    input.pipe(through(write, end));\n    return duplexer(input, output);\n    \n    function write (buf) {\n        var line = typeof buf === 'string' ? buf : buf.toString('utf8');\n        if (line === '') {\n            if (!closed) {\n                output.queue(self.getPrompt());\n            }\n            return;\n        }\n        if (self.current) return queue.push(line);\n        \n        var p = self.eval(line);\n        p.on('SIGALRM', exit('SIGALRM', 142, 'Alarm clock'));\n        p.on('SIGHUP', exit('SIGHUP', 129, 'Hangup'));\n        p.on('SIGINT', exit('SIGINT', 0, ''));\n        p.on('SIGKILL', exit('SIGKILL', 137, 'Killed'));\n        p.on('SIGPIPE', exit('SIGPIPE', 141, ''));\n        p.on('SIGPOLL', exit('SIGPOLL', 157, 'I/O possible'));\n        p.on('SIGPROF', exit('SIGPROF', 155, 'Profiling timer expired'));\n        p.on('SIGTERM', exit('SIGTERM', 143, 'Terminated'));\n        p.on('SIGUSR1', exit('SIGUSR1', 138, 'User defined signal 1'));\n        p.on('SIGUSR2', exit('SIGUSR2', 140, 'User defined signal 2'));\n        p.on('SIGVTALRM', exit('SIGVTALRM', 154, 'Virtual timer expired'));\n        p.on('SIGSTKFLT', exit('SIGSTKFLT', 144, 'Stack fault'));\n        \n        function exit (name, code, msg) {\n            return function () {\n                if (name === 'SIGKILL' || p.listeners(name).length === 1) {\n                    output.queue(msg + '\\n');\n                    p.emit('exit', code);\n                }\n                else p.emit('exit', code);\n            };\n        }\n        \n        self.current = p;\n        \n        p.pause();\n        p.pipe(through(null, function () { p.emit('exit', 0) }));\n        \n        var exitCode = null;\n        p.on('exit', function (code) {\n            if (exitCode !== null) return;\n            exitCode = code;\n            self.current = null;\n            nextTick(function () {\n                if (!closed) output.queue(self.getPrompt());\n                if (queue.length) {\n                    write(queue.shift());\n                }\n                else if (closed) {\n                    output.queue(null);\n                    self.emit('exit', 0);\n                }\n            });\n        });\n        p.pipe(output, { end: false });\n        p.resume();\n    }\n    \n    function end () {\n        closed = true;\n        if (!self.current) {\n            output.queue(null);\n            self.emit('exit', 0);\n        }\n    }\n};\n\nBash.prototype.emit = function (name) {\n    var self = this;\n    var args = [].slice.call(arguments, 1);\n    var res;\n    this.listeners(name).forEach(function (fn) {\n        res = res || fn.apply(self, args);\n    });\n    return res;\n};\n\nBash.prototype.eval = function (line) {\n    var self = this;\n    if (!/\\S+/.test(line)) {\n        return builtins.echo.call(self, [ '-n' ]);\n    }\n    var input = through(), output = resumer();\n    \n    if (Array.isArray(line)) line = line.join(' ');\n    var parts = shellQuote.parse(line, function (key) {\n        return { env: key };\n    });\n    var commands = [];\n    \n    for (var i = 0; i < parts.length; i++) {\n        if (typeof parts[i] === 'object' && parts[i].op === 'glob') {\n            // todo: globs\n            parts[i] = parts[i].pattern;\n        }\n    }\n    for (var i = 0; i < parts.length; i++) {\n        if (typeof parts[i] === 'object' && parts[i].op) {\n            commands.push(parts[i]);\n        }\n        else {\n            var cmd = commands[commands.length-1];\n            if (!cmd || !cmd.command) {\n                cmd = { command: parts[i], args: [] };\n                commands.push(cmd);\n            }\n            else cmd.args.push(parts[i]);\n        }\n    }\n    \n    var index = 0;\n    \n    (function run (prevCode) {\n        self.env['?'] = prevCode;\n        \n        if (commands.length === 0) {\n            return nextTick(function () {\n                output.emit('exit', self.env['?']);\n                output.queue(null);\n            });\n        }\n        var cmd = shiftCommand();\n        var redirected = false;\n        \n        while (commands[0] && /^[&|<>]$/.test(commands[0].op)) {\n            var op = commands.shift().op;\n            if (op === '|') {\n                cmd = cmd.pipe(shiftCommand());\n            }\n            else if (op === '&') {\n                var index = self._jobIndex();\n                self.jobs[index] = cmd;\n                (function (cmd, index) {\n                    process.nextTick(function () {\n                        cmd.on('data', function (buf) {\n                            self.emit('bgdata', buf);\n                        });\n                    });\n                    cmd.on('end', function () {\n                        delete self.jobs[index];\n                        self.emit('done', index, cmd);\n                    });\n                })(cmd, index);\n                self.emit('detach', cmd);\n                if (commands.length) {\n                    cmd = shiftCommand();\n                }\n                else {\n                    cmd = builtins['true'].call(self, []);\n                }\n            }\n            else if (op === '>') {\n                var c = commands.shift();\n                var file = typeof c === 'object' && c.env\n                    ? self.env[c.env]\n                    : c.command\n                ;\n                var ws = self._write(file);\n                ws.on('error', function (err) {\n                    output.queue(file + ': ' + (err.message || err) + '\\n');\n                    exitCode = err && err.code || 1;\n                });\n                if (!ws) {\n                    output.queue(file + ': No such file or directory\\n');\n                    exitCode = 1;\n                }\n                else cmd.pipe(ws);\n                redirected = true;\n            }\n            else if (op === '<') {\n                var c = commands.shift();\n                var file = typeof c === 'object' && c.env\n                    ? self.env[c.env]\n                    : c.command\n                ;\n                var rs = self._read(file);\n                rs.on('error', function (err) {\n                    output.queue(file + ': ' + (err.message || err) + '\\n');\n                    exitCode = err && err.code || 1;\n                });\n                if (!rs) {\n                    output.queue(file + ': No such file or directory\\n');\n                    exitCode = 1;\n                }\n                else rs.pipe(cmd);\n            }\n        }\n        \n        var exitCode = 0;\n        if (!redirected) cmd.pipe(output, { end: false });\n        \n        cmd.on('exit', function (code) { exitCode = exitCode || code });\n        cmd.on('end', function () {\n            for (var next = commands[0]; next && next.op; next = commands[0]) {\n                commands.shift();\n                if (next && next.op === '&&' && exitCode !== 0) {\n                    commands.shift();\n                    exitCode = 1;\n                }\n                else if (next && next.op === '||' && exitCode === 0) {\n                    commands.shift();\n                    exitCode = 1;\n                }\n            }\n            run(exitCode);\n        });\n        return cmd;\n    })(0);\n    \n    function shiftCommand () {\n        var c = commands.shift();\n        var cmd = c.command;\n        var args = c.args.map(function (arg) {\n            if (typeof arg === 'object' && arg.env) {\n                var r = self.env[arg.env];\n                if (r === undefined) r = '';\n                return String(r);\n            }\n            else return arg;\n        }).filter(Boolean);\n        \n        var localEnv = null;\n        while (typeof cmd === 'string' && /^\\w+=/.test(cmd)) {\n            var m = /^(\\w+)=(?:\"((?:[^\"]|\\\\\")*)\"|'((?:[^']|\\\\')*)'|(.*))/\n                .exec(cmd)\n            ;\n            var key = m[1], value = m[2] || m[3] || m[4] || '';\n            \n            if (!localEnv) localEnv = copy(self.env);\n            localEnv[key] = value;\n            \n            cmd = args.shift();\n            if (cmd === undefined) {\n                Object.keys(localEnv).forEach(function (key) {\n                    self.env[key] = localEnv[key];\n                });\n                var tr = resumer();\n                tr.command = cmd;\n                tr.arguments = args;\n                tr.queue(null);\n                return tr;\n            }\n        }\n        \n        if (typeof cmd === 'object' && cmd.env) {\n            cmd = self.env[cmd.env];\n        }\n        \n        if (builtins[cmd] && self.custom.indexOf(cmd) < 0) {\n            var p = builtins[cmd].call(self, args);\n            p.command = cmd;\n            p.arguments = args;\n            return p;\n        }\n        \n        var p = self._spawn(cmd, args, {\n            env: localEnv || self.env,\n            cwd: self.env.PWD\n        });\n        \n        if (p && p.stdin && p.stdout) {\n            var d = duplexer(p.stdin, p.stdout);\n            d.command = cmd;\n            d.arguments = args;\n            p.on('exit', function (code) { d.emit('exit', code) });\n            return d;\n        }\n        if (!p) {\n            p = resumer();\n            p.queue('No command ' + stringify(cmd) + ' found\\n');\n            p.queue(null);\n        }\n        \n        if (index++ === 0) input.pipe(p);\n        \n        p.command = cmd;\n        p.arguments = args;\n        \n        return p;\n    }\n    \n    return duplexer(input, output);\n};\n\nBash.prototype._jobIndex = function () {\n    var jobs = Object.keys(this.jobs).map(Number);\n    if (jobs.length === 0) return 0;\n    return Math.max.apply(null, jobs) + 1;\n};\n\nfunction copy (obj) {\n    var res = {};\n    Object.keys(obj).forEach(function (key) {\n        res[key] = obj[key];\n    });\n    return res;\n}\n\nvar builtins = require('./lib/builtins/index.js');\nbuiltins.eval = Bash.prototype.eval;\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/next_tick.js":"module.exports = typeof setImmediate === 'function'\n    ? setImmediate : process.nextTick\n;\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/index.js":"exports.echo = require('./echo.js');\nexports.cd = require('./cd.js');\nexports.pwd = require('./pwd.js');\nexports.exit = require('./exit.js');\nexports['true'] = require('./true.js');\nexports['false'] = require('./false.js');\nexports.jobs = require('./jobs.js');\nexports.pushd = require('./pushd.js');\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/echo.js":"var resumer = require('resumer');\n\nmodule.exports = function (args) {\n    var tr = resumer();\n    \n    var opts = { newline: true, 'escape': false };\n    for (var i = 0; i < args.length; i++) {\n        if (args[i] === '-n') {\n            opts.newline = false;\n            args.splice(i--, 1);\n        }\n        else if (args[i] === '-e') {\n            opts['escape'] = true;\n            args.splice(i--, 1);\n        }\n        else if (args[i] === '-E') {\n            opts['escape'] = false;\n            args.splice(i--, 1);\n        }\n    }\n    \n    if (args.length) tr.queue(args.join(' '));\n    if (opts.newline) tr.queue('\\n');\n    tr.queue(null);\n    \n    return tr;\n};\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/cd.js":"var resumer = require('resumer');\nvar nextTick = require('../next_tick.js');\nvar parseArgs = require('minimist');\nvar path = require('path');\n\nmodule.exports = function (args) {\n    var env = this.env;\n    var dir = env.HOME;\n    var argv = parseArgs(args);\n    \n    var dir = (argv._[0] === undefined ? env.HOME : argv._[0]) || '';\n    var edir = dir.replace(/^~\\//, function () { return env.HOME + '/' });\n    edir = path.resolve(env.PWD, edir);\n    \n    var tr = resumer();\n    if (this._exists) this._exists(edir, onexists);\n    else nextTick(function () { onexists(false) });\n    \n    return tr;\n    \n    function onexists (ex) {\n        if (ex) {\n            env.PWD = edir;\n            tr.emit('exit', 0);\n            tr.queue(null);\n        }\n        else {\n            tr.queue('cd: ' + dir + ': No such file or directory\\n');\n            tr.emit('exit', 1);\n            tr.queue(null);\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/pwd.js":"var resumerExit = require('../resumer_exit.js');\n\nmodule.exports = function (args) {\n    var tr = resumerExit(0);\n    tr.queue(this.env.PWD + '\\n');\n    return tr;\n};\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/resumer_exit.js":"var through = require('through');\nvar nextTick = require('./next_tick.js');\n\nmodule.exports = function (code) {\n    var tr = through();\n    tr.pause();\n    nextTick(function () {\n        tr.emit('exit', code);\n        tr.queue(null);\n        tr.resume();\n    });\n    return tr;\n};\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/exit.js":"var through = require('through');\n\nmodule.exports = function (args) {\n    this.emit('exit', parseInt(args[0] || '0'));\n    return through();\n};\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/true.js":"var resumerExit = require('../resumer_exit.js');\n\nmodule.exports = function (args) {\n    return resumerExit(0);\n};\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/false.js":"var resumerExit = require('../resumer_exit.js');\n\nmodule.exports = function (args) {\n    return resumerExit(1);\n};\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/jobs.js":"var resumer = require('../resumer_exit.js');\n\nmodule.exports = function (args) {\n    var tr = resumer();\n    var jobs = this.jobs;\n    tr.queue(Object.keys(jobs).map(function (ix) {\n        var j = jobs[ix];\n        return '[' + ix + '] '\n            + (j.command + ' ' + j.arguments.join(' ')).replace(/\\s+$/, '')\n            + '\\n'\n        ;\n    }).join(''));\n    return tr;\n};\n","/home/travis/build/npmtest/node-npmtest-bashful/node_modules/bashful/lib/builtins/pushd.js":"var resumer = require('resumer');\nvar resumerExit = require('../resumer_exit');\nvar nextTick = require('../next_tick.js');\nvar path = require('path');\nvar rotate = require('rotate-array');\n\nmodule.exports = function (args) {\n    var env = this.env;\n    var dirs = (this.dirs = this.dirs || []);\n    var tr;\n    var dir;\n    var swap;\n    var shift;\n\n    function suppressExists(dir) {\n        var tr = resumerExit(0);\n        if (!dir) return tr;\n        dirs.unshift(dir);\n        tr.queue(env.PWD + ' ' + dirs.join(' ') + '\\n');\n        return tr;\n    }\n\n    // replace ^env.HOME with ~ (for display)\n\n    // pushd +N/-N\n    if (/^[+-]\\d+$/.test(args[0])) {\n        // Using parseInt directly and checking for NaN\n        // values would cause false positives for directory\n        // names starting with integers, hence the regexp\n        var num = parseInt(args[0], 10);\n        if (Math.abs(num) > dirs.length) {\n            tr = resumerExit(1);\n            // Use args[0] to preserve '+' prefix for positive numbers\n            tr.queue('pushd: ' + args[0] + ': directory stack index out of range\\n');\n            return tr;\n        }\n        dirs.unshift(env.PWD);\n        rotate(dirs, num);\n        dir = dirs.shift();\n        shift = true;\n\n    // pushd -n dir\n    } else if (args[0] === \"-n\") return suppressExists(args[1]);\n\n    // pushd dir -n\n    else if (args[1] === \"-n\") return suppressExists(args[0]);\n\n    // pushd dir\n    else if (args[0]) dir = args[0];\n\n    // pushd\n    else {\n        if (dirs.length === 0) {\n            tr = resumerExit(1);\n            tr.queue('pushd: no other directory\\n');\n            return tr;\n        }\n        dir = dirs.shift();\n        swap = true;\n    }\n\n    var edir = dir.replace(/^~/, env.HOME);\n    edir = path.resolve(env.PWD, edir);\n\n    tr = resumer();\n    if (this._exists) this._exists(edir, onexists);\n    else nextTick(function () { onexists(false) });\n\n    return tr;\n\n    function onexists (ex) {\n        if (ex) {\n            if (!shift) dirs.unshift(env.PWD);\n            env.PWD = edir;\n            tr.queue(edir + ' ' + dirs.join(' ') + '\\n');\n            tr.queue(null);\n            tr.emit('exit', 0);\n        }\n        else {\n            if (swap) dirs.unshift(env.PWD);\n            tr.queue('pushd: ' + edir + ': No such file or directory\\n');\n            tr.queue(null);\n            tr.emit('exit', 1);\n        }\n    }\n};\n"}